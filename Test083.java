/*=============================
	■■■ 배열 ■■■
	- 배열의 기본적인 활용
=============================*/

// ○ 과제
// 사용자로부터 임의의 정수를 임의의 갯수만큼 입력받아
// 입력받은 수 중에서 가장 큰 수를 출력하는 프로그램을 구현한다.
// 단, 배열을 활용하여 구현할 수 있도록 한다.

// 실행 예)
// 입력할 데이터의 갯수 : 10
// 데이터 입력(공백 구분) : 45 92 75 13 2 5 2 63 90 17
// >> 가장 큰 수 → 92
// 계속하려면 아무 키나 누르세요..

import java.util.Scanner;

public class Test083
{
	public static void main(String[] args) 
	{
		// Scanner 인스턴스 생성
		Scanner sc = new Scanner(System.in);
		
		// 변수 생성 및 초기화
		int num;	// 데이터의 갯수
		int i=0;	// 데이터 배열에 사용하는 변수
		int j=0;	// 임의의 데이터와 입력값을 비교할 때 사용하는 변수

		// 데이터의 갯수 입력받기
		System.out.print("입력할 데이터의 갯수 : ");	// 구문 출력
		num = sc.nextInt();								// 입력할 데이터의 갯수를 입력받는다.
		
		// 배열 생성 및 초기화
		int[] data = new int[num];						// int형 배열 data를 생성하고 초기화한다.
														// 배열은 입력받은 num개만큼 생성하기로 한다.
		// 데이터 입력받기
		System.out.print("데이터 입력(공백 구분) :");	// 구문출력
		do												// 데이터는 num개만큼 입력받아야하기 때문에 do while형 구문을 사용하도록 한다.
		{
			data[i] = sc.nextInt();						// 데이터를 data배열에 입력받는다.
			i++;
		}
		while (i<num);									// 데이터는 num개를 넘기지 않도록 한다.

		// 입력받은 데이터와 임의의 값 비교
		for (int n=0 ; n<num ; n++)						// 데이터가 0에서 +1을 하며 num개 될 때까지 반복한다	
		{
			if (j<data[n])								// 만일 임의의 수 j보다 data[n]의 값이 더 크다면
			{
				j = data[n];							// 임의의 수에 data[n]의 값을 저장한다.
			}
		}
		
		// 결과 출력
		System.out.println(">> 가장 큰 수 → "+j);		// 가장 큰 수가 저장된 j값을 출력한다.
		
	}
}

//실행 결과
/*
입력할 데이터의 갯수 : 10
데이터 입력(공백 구분) :45 92 75 13 2 5 2 63 90 17
>> 가장 큰 수 → 92
*/
